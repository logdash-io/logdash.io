name: Clickhouse restore (dev)

on:
  workflow_dispatch:
    inputs:
      backup_run_id:
        description: 'GitHub Run ID of the backup workflow to restore from'
        required: true
        type: string
      confirmation_password:
        description: 'Type "RESTORE_CONFIRMED" to proceed with restore operation'
        required: true
        type: string

jobs:
  restore:
    runs-on: ubuntu-latest

    steps:
      - name: Validate Input Password
        run: |
          if [ "${{ github.event.inputs.confirmation_password }}" != "RESTORE_CONFIRMED" ]; then
            echo "‚ùå Invalid confirmation password. Please type 'RESTORE_CONFIRMED' to proceed."
            exit 1
          fi
          echo "‚úÖ Confirmation password validated"
        shell: bash

      - name: Checkout
        uses: actions/checkout@v3

      - name: Install ClickHouse Client
        run: |
          curl https://clickhouse.com/ | sh
          sudo ./clickhouse install
        shell: bash

      - name: Download Backup Artifact
        uses: actions/download-artifact@v4
        with:
          name: clickhouse_backup_dev_${{ github.event.inputs.backup_run_id }}
          path: ./restore

      - name: Extract and Validate Backup
        run: |
          cd restore

          # Find the backup file
          BACKUP_FILE=$(find . -name "clickhouse_backup_dev_*.tar.gz" | head -1)

          if [ -z "$BACKUP_FILE" ]; then
            echo "‚ùå No backup file found in artifact"
            exit 1
          fi

          echo "Found backup file: $BACKUP_FILE"

          # Extract backup
          tar -xzf "$BACKUP_FILE"

          # Validate backup structure
          if [ ! -f "backup/metadata.txt" ]; then
            echo "‚ùå Invalid backup: metadata.txt not found"
            exit 1
          fi

          if [ ! -f "backup/tables_list.tsv" ]; then
            echo "‚ùå Invalid backup: tables_list.tsv not found"
            exit 1
          fi

          echo "‚úÖ Backup validation passed"

          # Display backup information
          echo "üìã Backup Information:"
          cat backup/metadata.txt

          echo "üìä Tables in backup:"
          cat backup/tables_list.tsv
        shell: bash

      - name: Test ClickHouse Connection
        run: |
          echo "üîó Testing ClickHouse connection..."
          ./clickhouse client \
            --host="${{ secrets.BACKEND_DEV_CLICKHOUSE_EXTERNAL_HOST }}" \
            --port=${{ secrets.BACKEND_DEV_CLICKHOUSE_PORT }} \
            --user="${{ secrets.BACKEND_DEV_CLICKHOUSE_USER }}" \
            --password="${{ secrets.BACKEND_DEV_CLICKHOUSE_PASSWORD }}" \
            --database=default \
            --query="SELECT 1 as connection_test"
          echo "‚úÖ ClickHouse connection successful"
        shell: bash

            - name: Restore Tables
        run: |
          echo "üîÑ Starting table restoration..."
          cd restore

          # Restore tables from backup
          while IFS=$'\t' read -r database table engine; do
            if [ "$database" = "default" ] && [ "$table" != "tables_list" ]; then
              echo "üîß Restoring table: $table"
              
              # Create table schema
              if [ -f "backup/${table}_schema.sql" ]; then
                echo "Creating schema for table: $table"
                ../clickhouse client \
                  --host="${{ secrets.BACKEND_DEV_CLICKHOUSE_EXTERNAL_HOST }}" \
                  --port=${{ secrets.BACKEND_DEV_CLICKHOUSE_PORT }} \
                  --user="${{ secrets.BACKEND_DEV_CLICKHOUSE_USER }}" \
                  --password="${{ secrets.BACKEND_DEV_CLICKHOUSE_PASSWORD }}" \
                  --database=default \
                  --multiquery < "backup/${table}_schema.sql"
              else
                echo "‚ö†Ô∏è Schema file not found for table: $table"
                continue
              fi
              
              # Restore data if data file exists
              if [ -f "backup/${table}_data.native" ]; then
                echo "Restoring data for table: $table"
                ../clickhouse client \
                  --host="${{ secrets.BACKEND_DEV_CLICKHOUSE_EXTERNAL_HOST }}" \
                  --port=${{ secrets.BACKEND_DEV_CLICKHOUSE_PORT }} \
                  --user="${{ secrets.BACKEND_DEV_CLICKHOUSE_USER }}" \
                  --password="${{ secrets.BACKEND_DEV_CLICKHOUSE_PASSWORD }}" \
                  --database=default \
                  --query="INSERT INTO $table FORMAT Native" < "backup/${table}_data.native"
              else
                echo "‚ö†Ô∏è Data file not found for table: $table"
              fi
            fi
          done < backup/tables_list.tsv

          echo "‚úÖ Table restoration completed"
        shell: bash

      - name: Verify Restoration
        run: |
          echo "üîç Verifying restoration..."

          # Get restored tables count
          RESTORED_TABLES=$(./clickhouse client \
            --host="${{ secrets.BACKEND_DEV_CLICKHOUSE_EXTERNAL_HOST }}" \
            --port=${{ secrets.BACKEND_DEV_CLICKHOUSE_PORT }} \
            --user="${{ secrets.BACKEND_DEV_CLICKHOUSE_USER }}" \
            --password="${{ secrets.BACKEND_DEV_CLICKHOUSE_PASSWORD }}" \
            --database=default \
            --query="SELECT COUNT(*) FROM system.tables WHERE database = 'default' AND engine NOT LIKE '%System%'")

          echo "üìä Number of restored tables: $RESTORED_TABLES"

          # List restored tables with row counts
          echo "üìã Restored tables with row counts:"
          ./clickhouse client \
            --host="${{ secrets.BACKEND_DEV_CLICKHOUSE_EXTERNAL_HOST }}" \
            --port=${{ secrets.BACKEND_DEV_CLICKHOUSE_PORT }} \
            --user="${{ secrets.BACKEND_DEV_CLICKHOUSE_USER }}" \
            --password="${{ secrets.BACKEND_DEV_CLICKHOUSE_PASSWORD }}" \
            --database=default \
            --query="SELECT name, total_rows FROM system.tables WHERE database = 'default' AND engine NOT LIKE '%System%' ORDER BY name"

          echo "‚úÖ Restoration verification completed"
        shell: bash

      - name: Cleanup
        run: |
          rm -rf restore/
        shell: bash
