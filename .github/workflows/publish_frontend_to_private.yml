name: Publish Frontend to Private Repository

on:
  push:
    paths:
      - "apps/frontend/**"
      - "packages/hyper-ui/**"

jobs:
  publish-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Monorepo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for git subtree operations

      - name: Install git-filter-repo
        run: |
          sudo apt-get update -q
          sudo apt-get install -y git-filter-repo

      - name: Setup SSH access to private repo
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.FE_PRIVATE_REPO_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          echo "SSH key and known_hosts configured."

      - name: Configure Git and push frontend to private repo via SSH
        env:
          NEW_AUTHOR_NAME: "${{ secrets.FE_PRIVATE_REPO_USERNAME }}"
          NEW_AUTHOR_EMAIL: "${{ secrets.FE_PRIVATE_REPO_USEREMAIL }}"
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.

          TARGET_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          # Store the original branch name from the monorepo context
          ORIGINAL_MONOREPO_BRANCH="${GITHUB_REF_NAME:-$TARGET_BRANCH}" 

          # Configure Git identity for operations performed by the workflow.
          # This identity will be the committer for the split commits and, after filter-repo, also the author.
          git config --global user.name "$NEW_AUTHOR_NAME"
          git config --global user.email "$NEW_AUTHOR_EMAIL"

          git remote add private_mirror git@github.com:${{ secrets.FE_PRIVATE_REPO_USERNAME }}/${{ secrets.FE_PRIVATE_REPO_NAME }}.git
          git remote -v # optional sanity check

          echo "Creating a new branch and filtering repository to include frontend and hyper-ui..."
          # Create a new branch from the current state
          git checkout -b frontend-temp-branch

          echo "Filtering repository to include frontend, hyper-ui, and pnpm workspace files..."
          # Use git-filter-repo to extract directories and workspace files while preserving structure
          git filter-repo --path apps/frontend/ \
                          --path packages/hyper-ui/ \
                          --path pnpm-workspace.yaml \
                          --path pnpm-lock.yaml \
                          --path package.json \
                          --path tsconfig.json \
                          --name-callback "return b'$NEW_AUTHOR_NAME'" \
                          --email-callback "return b'$NEW_AUTHOR_EMAIL'" \
                          --force

          echo "Pushing rewritten frontend-temp-branch to private_mirror as branch $TARGET_BRANCH..."
          # TARGET_BRANCH is the branch name in the *private_mirror* repository.
          # It will be the same as the branch in the monorepo that triggered the workflow.
          git push --force private_mirror HEAD:$TARGET_BRANCH

          echo "Cleaning up temporary branch..."
          # Switch back to the original branch in the monorepo checkout
          git checkout "$ORIGINAL_MONOREPO_BRANCH"
          git branch -D frontend-temp-branch

          echo "Process complete."
