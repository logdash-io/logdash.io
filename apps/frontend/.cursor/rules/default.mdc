---
description:
globs:
alwaysApply: true
---

do NOT add any comments to the code, never.
instead of inline class conditions, use svelte's conditional classes like class={['class1', { 'class2': condition }]}
instead of naming function in the UI handleSomething, use onSomething instead

### 1. Code should read like a newspaper

- The most important logic should come first.
- If a function or component is used in a file, it should be defined _after_ its usage.
- Prioritize top-down readability â€” group related logic together and avoid jumping around the file.

### 2. Respect architectural discipline

- Follow **SOLID principles** wherever applicable.
- Maintain a **clear separation of concerns** â€” don't mix data fetching, UI, and business logic unless explicitly necessary.
- Distinguish between **smart (container)** and **dumb (presentational)** components.
- Adhere to a **layered architecture**: `ui â†’ application â†’ infrastructure â†’ domain -> shared`, etc.

### 3. Consistency and standards

- Follow the existing conventions in this codebase: naming, folder structure, import style, etc.
- If something is unclear or missing, **ask for context** before proceeding.
- If you make a decision that deviates from our patterns, briefly explain why.

### 4. UX for devs and users

- Code should be easy to reason about and maintain.
- Prefer clarity over cleverness.
- If something feels clunky, it probably needs to be refactored.

> ðŸ§  Tip: Write code as if you're the future maintainer â€” and youâ€™ve forgotten everything.

- never use `.then()`. Always use normal promises,
- very important: do not add any comments to the produced code,
- enums keys are in `THIS_CASE`. Enum values are in `this-case`,
- distinguish between dtos and regular interfaces
- keep state type within the state file
- things from /shared shouldn't import anything domain-specific, if more than one domain is using something it should become part of /shared
- always use private/public when defining class methods,
- always include function return type
- do NOT include bootstrap classes, project is styled with daisyui+tailwind - see app.css for custom classess
- respect @deprecated annotations, do not use or extend deprecated code
- do not add new things to logdash.api.ts, it's deprecated. Use infrastructure services instead
- try to use early returns instead of big nested if statements
- use ts-pattern match instead of switch statements
